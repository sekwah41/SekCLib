import org.apache.http.HttpEntity
import org.apache.http.client.methods.CloseableHttpResponse
import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.ContentType
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClients


buildscript {
    repositories {
        maven {
            name = 'NeoForge'
            url = 'https://maven.neoforged.net/releases'
        }
        maven { url = "https://repo.spongepowered.org/maven" }
        //maven { url = 'https://sizableshrimp.me/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.spongepowered:mixingradle:0.7+"
        classpath "org.apache.httpcomponents:httpmime:4.5.14"
    }
}

plugins {
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
}

apply plugin: "java"
apply plugin: 'eclipse'

def modid = "sekclibtest"

apply plugin: "org.spongepowered.mixin"

def branch = System.getenv("GITHUB_REF")
def snapshotName = null;
if(branch != null) {
    branch = branch.replace('refs/heads/', '')
}
def isRelease = System.getenv("IS_RELEASE") == "true"

snapshotName = "forge-" + ((branch == null || branch.startsWith("release-please")) ? "SNAPSHOT" : branch)
def githubSha = System.getenv("GITHUB_SHA")
def shaRef = githubSha != null ? "-${githubSha.substring(0, 8)}" : ""

println "Branch ${branch}${shaRef} isRelease: '${isRelease}'"


println project.game_versions.tokenize(",")

// Get version from file managed by please-release
def versionString = (file('../version.txt').text + (isRelease ? "" : "-${snapshotName}${shaRef}")).replaceAll('\n', '')
setVersion(versionString)
println "Version: ${getVersion()}"

group = project.package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archive

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
//    maven { url = "https://maven.sekwah.com" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: project.minecraft_version

    // This is for personal local tests i was doing ignore it ;)
    //mappings channel: 'snapshot', version: '20200706-unofficialtest-1.16.1'

    // Readd if access transformers needed
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {

        // TODO need to find out why this seems to have missing files from :forge but ./gradlew :forge-testmod:runClient works fine
        //  Even the :forge intellij runs seem to be fine
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTR
            //version=1.2.1ES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            ideaModule "SekCLib.neoforge-testmod.main"

            mods {
                "${modid}" {
                    source sourceSets.main
                    source project(':common-testmod').sourceSets.main
                }
                "sekclib" {
                    source project(':neoforge').sourceSets.main
                    source project(':common').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            ideaModule "SekCLib.neoforge-testmod.main"

            mods {
                "${modid}" {
                    source sourceSets.main
                    source project(':common-testmod').sourceSets.main
                }
                "sekclib" {
                    source project(':neoforge').sourceSets.main
                    source project(':common').sourceSets.main
                }
            }
        }

        /*data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            ideaModule "SekCLib.neoforge-testmod.main"

            args '--mod', modid, '--all', '--output', file('src/generated/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }*/
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"

    implementation 'org.spongepowered:mixin:0.8.5'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation project(":neoforge")
    common(project(path: ":common", configuration: "namedElements"))
    common(project(path: ":common-testmod", configuration: "namedElements"))

}

// Readd if mixins start being used
mixin {
    add sourceSets.main, "mixins.${modid}.refmap.json"

    debug.verbose = true
    debug.export = true
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    finalizedBy 'reobfJar'
    archiveClassifier = 'universal'
    archiveBaseName = "${archivesBaseName}${project.mc_label}"
    manifest {
        attributes([
                "Specification-Title": modid,
                "Specification-Vendor": project.vendor,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${versionString}",
                "Implementation-Vendor" :project.vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
    archiveBaseName = "${archivesBaseName}${project.mc_label}"
    from file("LICENSE")
}

task deobfJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.output
    archiveClassifier = 'deobf'
    archiveBaseName = "${archivesBaseName}${project.mc_label}"
    from file("LICENSE")
}

def getReleaseChangelog() {
    def changelogFile = file('../CHANGELOG.md')
    def changelog = "## [${changelogFile.text.split('\n## \\[')[1]}\n\n"// ${project.github}/blob/${branch}/CHANGELOG.md
    return changelog;
}

/**
 * For pre-releases and testers to be able to try the latest commits if they want.
 * If the builds start exceeding 8MB then we may want to upload to s3 instead and periodically clear.
 * TODO possibly add a task that announces when builds are made?
 * Though add a note that it may take a while for Curse to approve the files.
 */
task discordupload {
    dependsOn(jar)
    doLast {
        String discordWebhook = System.getenv("DISCORD_WEBHOOK")

        if(discordWebhook != null) {

            CloseableHttpClient httpClient = HttpClients.createDefault()
            HttpPost uploadFile = new HttpPost(discordWebhook)

            MultipartEntityBuilder builder = MultipartEntityBuilder.create()
            if(!isRelease) {
                builder.addTextBody("content", "New snapshot or testing build")
            } else {
                builder.addTextBody("content", "New release build\n" +
                        "```markdown\n" +
                        "${getReleaseChangelog()}\n" +
                        "```")
            }

            var name = jar.archiveBaseName.get() + "-" + jar.archiveVersion.get() + ".jar"

            builder.addBinaryBody("file", file(jar.archiveFile).newInputStream(), ContentType.APPLICATION_OCTET_STREAM, name)

            HttpEntity multipart = builder.build()

            uploadFile.setEntity(multipart)
            CloseableHttpResponse response = httpClient.execute(uploadFile)
            response.getEntity()

            println("Posted build")

        } else {
            println("Discord webhook unspecified")
        }
    }
}
