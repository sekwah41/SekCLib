import org.apache.http.HttpEntity
import org.apache.http.client.methods.CloseableHttpResponse
import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.ContentType
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClients


buildscript {
    repositories {
        maven {
            name = 'NeoForge'
            url = 'https://maven.neoforged.net/releases'
        }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.apache.httpcomponents:httpmime:4.5.14"
    }
}
plugins {
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
}

apply plugin: "java"
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

//apply plugin: "org.spongepowered.mixin"

def branch = System.getenv("GITHUB_REF")
def snapshotName = null;
if(branch != null) {
    branch = branch.replace('refs/heads/', '')
}
def isRelease = System.getenv("IS_RELEASE") == "true"

snapshotName = ((branch == null || branch.startsWith("release-please")) ? "SNAPSHOT" : branch)
def githubSha = System.getenv("GITHUB_SHA")
def shaRef = githubSha != null ? "-${githubSha.substring(0, 8)}" : ""

println "Branch ${branch}${shaRef} isRelease: '${isRelease}'"

// Get version from file managed by please-release
def versionString = (file('../version.txt').text + (isRelease ? "" : "-${snapshotName}${shaRef}")).replaceAll('\n', '')
setVersion(versionString)
println "Version: ${getVersion()}"

group = project.package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archive

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
//    maven { url = "https://maven.sekwah.com" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: project.minecraft_version

    // This is for personal local tests i was doing ignore it ;)
    //mappings channel: 'snapshot', version: '20200706-unofficialtest-1.16.1'

    // Readd if access transformers needed
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTR
            //version=1.2.1ES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'


            ideaModule "SekCLib.neoforge.main"

            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${project.modid}" {
                    source sourceSets.main
                    //source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            ideaModule "SekCLib.neoforge.main"

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        // Uncomment if we need datagen
        /*data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            ideaModule "SekCLib.neoforge.main"

            args '--mod', project.modid, '--all', '--output', file('src/generated/resources/')

            mods {
                "${project.modid}" {
                    source sourceSets.main
                    // Possibly check if there is a nicer way to set this as intellij doesnt like source sets being used across multiple projects
                    // https://youtrack.jetbrains.com/issue/IDEABKL-6745
                    // While it all works fine with the gradle runs and viewing sources, it can be a bit odd with certain other things.
                    source project(":common").sourceSets.main
                }
            }
        }*/
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}


dependencies {

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"

    common(project(path: ":common", configuration: "namedElements"))

    //implementation 'org.spongepowered:mixin:0.8.5'
    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //compile "com.sekwah:SekCLib:${sekclib_version}:deobf"
    // Trick intellij to allow for better editing in here for the discord task
    // compile "org.apache.httpcomponents:httpmime:4.5.13"
    //implementation fg.deobf("curse.maven:torohealth-damage-indicators-245733:3556931")

    //implementation fg.deobf("curse.maven:hwyla:${project.hwyla_fileid}")

    //include('org.ow2.asm:asm-debug-all:5.2')

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Readd if mixins start being used
//mixin {
//    add sourceSets.main, "mixins.${project.modid}.refmap.json"
//
//    debug.verbose = true
//    debug.export = true
//}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    // Not 100% if this is needed because it seems to output identical jars even if commented out
    // But this HAS to be commented out to allow the forge-testmod to successfully run
    // finalizedBy 'reobfJar'
    archiveBaseName = "${archivesBaseName}${project.mc_label}-forge"
    archiveClassifier = 'universal'
    manifest {
        attributes([
                "Specification-Title": project.modid,
                "Specification-Vendor": project.vendor,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${versionString}",
                "Implementation-Vendor" :project.vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
    archiveBaseName = "${archivesBaseName}${project.mc_label}-forge"
    from file("LICENSE")
}

task deobfJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.output
    archiveClassifier = 'deobf'
    archiveBaseName = "${archivesBaseName}${project.mc_label}-forge"
    manifest {
        attributes([
                "Specification-Title": project.modid,
                "Specification-Vendor": project.vendor,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${versionString}",
                "Implementation-Vendor" :project.vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    from file("LICENSE")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "sekclib-forge"
            artifact reobfArtifact
            artifact srcJar
        }
    }
    repositories {
        maven {
            url "s3://sekwah-maven/"
            authentication {
                awsIm(AwsImAuthentication)
            }
        }
    }
}

def getReleaseChangelog() {
    def changelogFile = file('../CHANGELOG.md')
    def changelog = "## [${changelogFile.text.split('\n## \\[')[1]}\n\n"// ${project.github}/blob/${branch}/CHANGELOG.md
    return changelog;
}


task discordupload {
    dependsOn(jar)
    doLast {
        String discordWebhook = System.getenv("DISCORD_WEBHOOK")

        if(discordWebhook != null) {

            CloseableHttpClient httpClient = HttpClients.createDefault()
            HttpPost uploadFile = new HttpPost(discordWebhook)

            MultipartEntityBuilder builder = MultipartEntityBuilder.create()
            if(!isRelease) {
                builder.addTextBody("content", "New snapshot or testing build")
            } else {
                builder.addTextBody("content", "New release build\n" +
                        "```markdown\n" +
                        "${getReleaseChangelog()}\n" +
                        "```")
            }

            var name = jar.archiveBaseName.get() + "-" + jar.archiveVersion.get() + ".jar"

            builder.addBinaryBody("file", file(jar.archiveFile).newInputStream(), ContentType.APPLICATION_OCTET_STREAM, name)

            HttpEntity multipart = builder.build()

            uploadFile.setEntity(multipart)
            CloseableHttpResponse response = httpClient.execute(uploadFile)
            response.getEntity()

            println("Posted build")

        } else {
            println("Discord webhook unspecified")
        }
    }
}

tasks.curseforge.enabled = System.getenv("CURSE_API") != null

curseforge {
    logger.info("Curse api: " + System.getenv("CURSE_API"))
    if (System.getenv("CURSE_API") != null) {
        apiKey = System.getenv("CURSE_API")
    }
    project {
        id = project.curse_project_id
        // TODO add code to reference this but also cut the latest change logs in for the files
        changelog = getReleaseChangelog()
        changelogType = 'markdown'
        releaseType = 'release'
        addGameVersion 'Forge'
        addGameVersion 'NeoForge'
        addGameVersion '1.20'
        addGameVersion '1.20.1'

        mainArtifact(jar){

        }
        addArtifact srcJar
        addArtifact deobfJar
    }
}

// https://github.com/modrinth/minotaur
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_slug
    versionType = "release"
    uploadFile = jar
    versionName = "${versionString} for Forge"
    loaders = ["forge", "neoforge"]
    additionalFiles = [srcJar, deobfJar]
    // Split string into array


    gameVersions = project.game_versions.tokenize(",")
    changelog = getReleaseChangelog()

    syncBodyFrom = rootProject.file("README.md").text
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}
